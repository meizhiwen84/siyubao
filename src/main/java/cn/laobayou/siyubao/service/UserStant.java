package cn.laobayou.siyubao.service;import cn.laobayou.siyubao.bean.UserQuestionContent;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.core.io.ClassPathResource;import org.springframework.stereotype.Component;import javax.annotation.PostConstruct;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.nio.charset.StandardCharsets;import java.nio.file.Files;import java.nio.file.Paths;import java.util.ArrayList;import java.util.Collections;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Random;import java.util.regex.Matcher;import java.util.regex.Pattern;import java.util.stream.Collectors;/** * 定义用户客人的一些常量 */@Componentpublic class UserStant {    // 常用汉字Unicode范围（约2000个常用汉字）    private static final String CHINESE_CHARS = "\u4e00-\u9fa5";    private static final String LETTERS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";    private static final String NUMBERS = "0123456789";    private static final Random random = new Random();    @Autowired    private SiyubaoConfig siyubaoConfig;    private List<String> questions=new ArrayList();    private List<String> jidajixiaoList=new ArrayList();    private List<String> dsqianList=new ArrayList();    private List<String> replies = new ArrayList();    private List<String> responses=new ArrayList();    private List<String> nameList=new ArrayList();    private String wordStr;    @PostConstruct    public void init(){        try {            ClassPathResource resource = new ClassPathResource("static/question/"+siyubaoConfig.getQuestionFile());//            questions = Files.readAllLines( Paths.get(resource.getURI()));            questions=getFileLinesByResource(resource);            ClassPathResource jidajixiaors = new ClassPathResource("static/question/"+siyubaoConfig.getEnglishName()+"_jidajixiao.txt");//            jidajixiaoList = Files.readAllLines( Paths.get(jidajixiaors.getURI()));            jidajixiaoList=getFileLinesByResource(jidajixiaors);            ClassPathResource dsqianrs = new ClassPathResource("static/question/dsqian.txt");//            dsqianList = Files.readAllLines( Paths.get(dsqianrs.getURI()));            dsqianList=getFileLinesByResource(dsqianrs);            ClassPathResource sendliuzi = new ClassPathResource("static/question/sendliuzi.txt");//            replies = Files.readAllLines( Paths.get(sendliuzi.getURI()));            replies=getFileLinesByResource(sendliuzi);            ClassPathResource responsesrs = new ClassPathResource("static/question/wo.txt");//            responses = Files.readAllLines( Paths.get(responsesrs.getURI()));            responses=getFileLinesByResource(responsesrs);            ClassPathResource usernamers = new ClassPathResource("static/question/username.txt");//            nameList = Files.readAllLines( Paths.get(usernamers.getURI()));            nameList=getFileLinesByResource(usernamers);            wordStr=getAllWordStr();        } catch (Exception e) {            e.printStackTrace();        }    }    private List<String> getFileLinesByResource(ClassPathResource resource){        List<String> questions=new ArrayList();        // 使用流的方式读取，适用于本地和服务器环境        try (InputStream inputStream = resource.getInputStream();             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {            questions = reader.lines().collect(Collectors.toList());        } catch (IOException e) {            // 处理异常，例如文件不存在、读取失败等            throw new RuntimeException("无法读取问题文件: " + siyubaoConfig.getQuestionFile(), e);        }        return questions;    }//    public Map<String,String> getXianluNameAndPic(String xianlu){//        return this.getXianluNameAndPic(xianlu,"dy");//    }    public Map<String,String> getXianluNameAndPic(String xianlu,String platform){        String xianluName="";        String xianluPic="";        String welcomword="";        Map<String,String> xianluMap=new HashMap<String,String>();        if(xianlu.equals("enshi")){            xianluName=siyubaoConfig.getEnshiName();            xianluPic=siyubaoConfig.getEnshiPic();        }else if(xianlu.equals("cq")){            xianluName=siyubaoConfig.getCqName();            xianluPic=siyubaoConfig.getCqPic();        }else if(xianlu.equals("sc")){            if(platform.equals("dy")){                xianluName=siyubaoConfig.getScName();                xianluPic=siyubaoConfig.getScPic();            }            if(platform.equals("xhs")){                xianluName=siyubaoConfig.getScName4();                xianluPic=siyubaoConfig.getScPic4();            }            if(platform.equals("sph")){                xianluName=siyubaoConfig.getScName5();                xianluPic=siyubaoConfig.getScPic5();                welcomword=siyubaoConfig.getScWelcomword();            }        }else if(xianlu.equals("xj")){            xianluName=siyubaoConfig.getXjName();            xianluPic=siyubaoConfig.getXjPic();        }else if(xianlu.equals("bj")){            xianluName=siyubaoConfig.getBjName();            xianluPic=siyubaoConfig.getBjPic();        }else if(xianlu.equals("lm")){            xianluName=siyubaoConfig.getLmName();            xianluPic=siyubaoConfig.getLmPic();        }else if(xianlu.equals("gz")){            xianluName=siyubaoConfig.getGzName();            xianluPic=siyubaoConfig.getGzPic();        }else if(xianlu.equals("sc1")){            xianluName=siyubaoConfig.getScName2();            xianluPic=siyubaoConfig.getScPic2();        }else if(xianlu.equals("sc2")){            xianluName=siyubaoConfig.getScName3();            xianluPic=siyubaoConfig.getScPic3();        }else if(xianlu.equals("yn")){            xianluName=siyubaoConfig.getYnName();            xianluPic=siyubaoConfig.getYnPic();        }        xianluMap.put("xianluName",xianluName);        xianluMap.put("xianluPic",xianluPic);        xianluMap.put("welcomword",welcomword);        return xianluMap;    }    public String getRandomUserPic(){        Random random = new Random();        int randomIndex = random.nextInt(25148); // 生成一个从0到list.size()-1的随机索引        String randomElement = "./avatar/avatar_"+randomIndex+".jpg"; // 根据随机索引获取元素        return randomElement;    }    public String getRandomUserName(){        // 确定昵称长度(6-20)        int length = 6 + random.nextInt(4);        StringBuilder nickname = new StringBuilder();            // 生成随机组合（汉字、字母、数字）            for (int i = 0; i < length; i++) {                if(i<(length-3)){                    nickname.append(randomChineseChar());                    continue;                }                switch (random.nextInt(2)) {                    case 0: // 汉字                        nickname.append(randomChineseChar());                        break;//                    case 1: // 字母//                        nickname.append(randomChar(LETTERS));//                        break;//                    case 2: // 数字//                        nickname.append(randomChar(NUMBERS));//                        break;                }            }        return nickname.toString();    }    // 生成随机汉字    private String randomChineseChar() {//        return (char)(0x4e00 + random.nextInt(0x9fa5 - 0x4e00 + 1));        return getRandomChar();    }    // 从给定字符串中随机选择一个字符    private char randomChar(String source) {        return source.charAt(random.nextInt(source.length()));    }    private String getAllWordStr(){        StringBuilder b=new StringBuilder("");        for(String w : nameList){            String qx=w.trim();            // 判断是否包含字母 （包括大写字母和小写字母）            if(qx.matches(".*[a-zA-Z].*")){                Pattern p = Pattern.compile("[a-zA-z]");                Matcher matcher = p.matcher(qx);                // 把字母替换成 0                String qx_new = matcher.replaceAll("");                b.append(qx_new);            }        }        return b.toString();    }    /**     * 随机取一个汉字     */    private String getRandomChar(){        Random random = new Random();        int randomIndex = random.nextInt(wordStr.length());//        System.out.println("第"+randomIndex+"个:"+String.valueOf(wordStr.charAt(randomIndex)));        return String.valueOf(wordStr.charAt(randomIndex));    }    /**     * 如果小于10，则返回02     * @return     */    public String getTimeStr(int time){        return time<10?"0"+time:time+"";    }    /**     * 随机获取一个多少钱的内容     * @return 随机选择的回复内容     */    public String getDsQian() {        if (dsqianList.isEmpty()) {            return "暂无家庭人数信息";        }        Collections.shuffle(dsqianList);        return dsqianList.get(0);    }    /**     * 随机获取一个家庭人数回复     * @return 随机选择的回复内容     */    public String getRandomFamilySizeResponse() {        if (jidajixiaoList.isEmpty()) {            return "暂无家庭人数信息";        }        Collections.shuffle(jidajixiaoList);        return jidajixiaoList.get(0);    }    /**     * 随机获取一个回复     * @return 随机选择的回复内容     */    public String getRandomOkResponse() {        if (responses.isEmpty()) {            return "暂无可用回复";        }        Collections.shuffle(responses);        return responses.get(0);    }    public String getSendLiuziMsg(){        Collections.shuffle(replies);        return replies.get(0);    }    public ArrayList<UserQuestionContent> getCntQuestions(int qs){        ArrayList<UserQuestionContent> temps=new ArrayList(qs);        for (int i = 0; i <qs; i++) {            Collections.shuffle(questions);            UserQuestionContent userQuestionContent=UserQuestionContent.builder().content(questions.get(0)).build();            temps.add(userQuestionContent);        }        return temps;    }}